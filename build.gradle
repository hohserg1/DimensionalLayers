plugins {
    id 'java'
    id 'scala'
    id 'java-library'
    id 'maven-publish'
    id 'com.gradleup.shadow' version '9.0.2'
    id 'xyz.wagyourtail.unimined' version '1.4.1'
    id 'net.kyori.blossom' version '2.1.0'
}

apply from: 'gradle/scripts/helpers.gradle'

// Early Assertions
assertProperty 'mod_version'
assertProperty 'root_package'
assertProperty 'mod_id'
assertProperty 'mod_name'

assertSubProperties 'use_access_transformer', 'access_transformer_locations'
assertSubProperties 'is_coremod', 'coremod_includes_mod', 'coremod_plugin_class_name'
assertSubProperties 'use_asset_mover', 'asset_mover_version'

setDefaultProperty 'generate_sources_jar', true, false
setDefaultProperty 'generate_javadocs_jar', true, false
setDefaultProperty 'minecraft_username', true, 'Developer'
setDefaultProperty 'extra_jvm_args', false, ''

version = propertyString('mod_version')
group = propertyString('root_package')

base {
    archivesName.set(propertyString('mod_id'))
}

scala {
    scalaVersion = '3.7.2'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
    if (propertyBool('generate_sources_jar')) {
        withSourcesJar()
    }
    if (propertyBool('generate_javadocs_jar')) {
        withJavadocJar()
    }
}

configurations {
    embed
    contain
    implementation.extendsFrom(embed)
    implementation.extendsFrom(contain)
    modCompileOnly
    compileOnly.extendsFrom(modCompileOnly)
    modRuntimeOnly
    runtimeOnly.extendsFrom(modRuntimeOnly)
}

unimined.minecraft {
    version "1.12.2"

    mappings {
        mcp("stable", "39-1.12")
    }

    cleanroom {
        if (propertyBool('use_access_transformer')) {
            accessTransformer "${rootProject.projectDir}/src/main/resources/" + propertyString('access_transformer_locations')
        }
        loader "0.3.16-alpha"
        runs.auth.username = minecraft_username
        runs.all {
            def extraArgs = propertyString('extra_jvm_args')
            if (extraArgs != null && !extraArgs.trim().isEmpty()) {
                jvmArgs += extraArgs.split("\\s+").toList()
            }
            if (propertyBool('enable_foundation_debug')) {
                var map = getSystemProperties()
                map.put("foundation.dump", "true")
                map.put("foundation.verbose", "true")
            }
            return
        }
    }

    defaultRemapJar = false

    if (propertyBool('enable_shadow')) {
        remap(tasks.shadowJar) {
            mixinRemap {
                enableBaseMixin()
                enableMixinExtra()
                disableRefmap()
            }
        }
    } else {
        remap(tasks.jar) {
            mixinRemap {
                enableBaseMixin()
                enableMixinExtra()
                disableRefmap()
            }
        }
    }

    mods {
        remap(configurations.modCompileOnly)
    }
}

dependencies {
    if (propertyBool('use_asset_mover')) {
        implementation "com.cleanroommc:assetmover:${propertyString('asset_mover_version')}"
    }
    if (propertyBool('enable_junit_testing')) {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }
}

apply from: 'gradle/scripts/dependencies.gradle'

processResources {

    inputs.property 'mod_id', propertyString('mod_id')
    inputs.property 'mod_name', propertyString('mod_name')
    inputs.property 'mod_version', propertyString('mod_version')
    inputs.property 'mod_description', propertyString('mod_description')
    inputs.property 'mod_authors', "${propertyStringList('mod_authors', ',').join(', ')}"
    inputs.property 'mod_credits', propertyString('mod_credits')
    inputs.property 'mod_url', propertyString('mod_url')
    inputs.property 'mod_update_json', propertyString('mod_update_json')
    inputs.property 'mod_logo_path', propertyString('mod_logo_path')

    def filterList = ['mcmod.info', 'pack.mcmeta']

    filesMatching(filterList) { fcd ->
        fcd.expand(
                'mod_id': propertyString('mod_id'),
                'mod_name': propertyString('mod_name'),
                'mod_version': propertyString('mod_version'),
                'mod_description': propertyString('mod_description'),
                'mod_authors': "${propertyStringList('mod_authors', ',').join(', ')}",
                'mod_credits': propertyString('mod_credits'),
                'mod_url': propertyString('mod_url'),
                'mod_update_json': propertyString('mod_update_json'),
                'mod_logo_path': propertyString('mod_logo_path'),
        )
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

sourceSets {
    main {
        blossom {
            scalaSources {
                property('mod_id', propertyString('mod_id'))
                property('mod_name', propertyString('mod_name'))
                property('mod_version', propertyString('mod_version'))
                property('package', "${root_package}.${mod_id}")
            }
        }
    }
}

if (!propertyBool('enable_shadow')) {
    shadowJar.enabled = false
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    if (configurations.contain.size() > 0) {
        into('/') {
            from configurations.contain
        }
    }
    doFirst {
        manifest {
            def attribute_map = [:]
            attribute_map['ModType'] = "CRL"
            if (configurations.contain.size() > 0) {
                attribute_map['ContainedDeps'] = configurations.contain.collect { it.name }.join(' ')
                attribute_map['NonModDeps'] = true
            }
            if (propertyBool('is_coremod')) {
                attribute_map['FMLCorePlugin'] = propertyString('coremod_plugin_class_name')
                if (propertyBool('coremod_includes_mod')) {
                    attribute_map['FMLCorePluginContainsFMLMod'] = true
                }
            }
            if (propertyBool('use_access_transformer')) {
                attribute_map['FMLAT'] = propertyString('access_transformer_locations')
            }
            attributes(attribute_map)
        }
    }
    if (propertyBool('enable_shadow')) {
        finalizedBy(tasks.named("remapShadowJar"))
    } else {
        finalizedBy(tasks.named("remapJar"))
    }
}


shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier = "shadow"
}

remapJar {
    doFirst {
        logging.captureStandardOutput LogLevel.INFO
    }
    doLast {
        logging.captureStandardOutput LogLevel.QUIET
    }
}

compileTestJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_21
}

test {
    useJUnitPlatform()
    javaLauncher.set(javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(21)
    })
    if (propertyBool('show_testing_output')) {
        testLogging {
            showStandardStreams = true
        }
    }
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(ScalaCompile).configureEach {
    options.encoding = 'UTF-8'
    scalaCompileOptions.additionalParameters = [
            "-Wconf:msg=int2float:s", // I dont care about int->float precission at this project
    ]
}

apply from: 'gradle/scripts/publishing.gradle'
apply from: 'gradle/scripts/extra.gradle'
